package main

import "fmt"

type <a>Stack []a

func (s *<T>Stack) Push(x T) {
	s = append(s, x)
}

func (s *<T>Stack) Pop() (out T) {
	x := s[len(s)-1]
	s = s[:len(s)-1]
	return x
}

type <a>test a

var s <int>Stack

// TODO
// type WrappedStack struct {
// 	whatever int
// 	stack <int>Stack
// }

func main() {
	a := <int>Stack{123, 456}
	var b <string>Stack
	// var mytest <int>test
	b.Push("lalala")
	b.Push("lelele")
	fmt.Println(a, b)
	fmt.Println(func() string {
		var out0 string
		b.Pop(&out0)
		return out0
	}())
	fmt.Println(b)

	// TODO
	// var mytest <int>test
	// fmt.Println(mytest)
}
